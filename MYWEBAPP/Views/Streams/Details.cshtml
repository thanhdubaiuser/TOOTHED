@model MYWEBAPP.Models.LiveStream

@{
    ViewData["Title"] = @Model.Title;
}

<div class="container-fluid">
    <div class="row">
        <!-- Main Content -->
        <div class="col-lg-8">
            <!-- Stream Player -->
            <div class="card mb-4">
                <div class="card-body p-0">                    <div class="position-relative stream-player">
                        <img src="@(string.IsNullOrEmpty(Model.ThumbnailUrl) ? "/images/no-image.png" : Model.ThumbnailUrl)" 
                             class="img-fluid w-100" 
                             alt="@Model.Title"
                             style="height: 400px; object-fit: cover;">
                          <!-- Visibility Badge -->
                        <div class="visibility-badge">
                            @if (Model.Visibility == StreamVisibility.Public)
                            {
                                <i class="fas fa-globe" title="Public"></i> <span>Public</span>
                            }
                            else if (Model.Visibility == StreamVisibility.FollowersOnly)
                            {
                                <i class="fas fa-users" title="Followers Only"></i> <span>Followers Only</span>
                            }
                            else
                            {
                                <i class="fas fa-lock" title="Private"></i> <span>Private</span>
                            }
                        </div>
                        
                        <!-- Live Overlay -->
                        @if (Model.IsLive)
                        {
                            <div class="position-absolute d-flex align-items-center justify-content-center" 
                                 style="top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.7);">
                                <div class="text-center text-white">
                                    <div class="pulse-circle mb-3">
                                        <i class="fas fa-circle text-danger fa-2x"></i>
                                    </div>                                    <h3>LIVE STREAMING</h3>
                                    <p class="mb-0">@Model.ViewerCount.ToString("N0") viewers</p>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="position-absolute d-flex align-items-center justify-content-center" 
                                 style="top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.7);">
                                <div class="text-center text-white">                                    <i class="fas fa-play-circle fa-4x mb-3"></i>
                                    <h4>Stream has ended</h4>
                                    @if (Model.EndedAt.HasValue)
                                    {
                                        <p class="mb-0">Ended at: @Model.EndedAt.Value.ToString("dd/MM/yyyy HH:mm")</p>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Stream Info -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                        <div>
                            <h2 class="mb-1">@Model.Title</h2>
                            <div class="text-muted">
                                <span class="badge badge-primary">@Model.Category.Name</span>
                                @if (Model.IsFeatured)
                                {                                <span class="badge badge-warning ml-1">
                                        <i class="fas fa-star"></i> Featured
                                    </span>
                                }
                                @if (Model.IsLive)
                                {
                                    <span class="badge badge-danger ml-1">
                                        <i class="fas fa-circle"></i> LIVE
                                    </span>
                                }
                            </div>
                        </div>                        <div class="text-right">
                            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning btn-sm">
                                <i class="fas fa-edit"></i> Edit
                            </a>
                            <a asp-action="Index" class="btn btn-secondary btn-sm">
                                <i class="fas fa-arrow-left"></i> Back
                            </a>
                        </div>
                    </div>                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        <div class="mb-3">
                            <h5>Description:</h5>
                            <p class="text-muted">@Model.Description</p>
                        </div>
                    }<!-- Visibility Info -->
                    <div class="mb-3">
                        <h5>Privacy Settings:</h5>
                        <p class="text-muted">
                            @switch (Model.Visibility)
                            {
                                case StreamVisibility.Public:
                                    <span><i class="fas fa-globe text-success"></i> Public - Everyone can view</span>
                                    break;
                                case StreamVisibility.FollowersOnly:
                                    <span><i class="fas fa-users text-primary"></i> Followers Only - Only followers can view</span>
                                    break;
                                case StreamVisibility.Private:
                                    <span><i class="fas fa-lock text-danger"></i> Private - Only you can view</span>
                                    break;
                            }
                        </p>
                    </div>

                    <!-- Stats Row -->
                    <div class="row text-center">                        <div class="col-md-3">
                            <div class="stat-box">
                                <h4 class="text-primary mb-1">@Model.TotalViews.ToString("N0")</h4>
                                <small class="text-muted">Total Views</small>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="stat-box">
                                <h4 class="text-success mb-1">@Model.ViewerCount.ToString("N0")</h4>
                                <small class="text-muted">Current Viewers</small>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="stat-box">
                                <h4 class="text-info mb-1">
                                    @(Model.Duration > 0 ? TimeSpan.FromMinutes(Model.Duration).ToString(@"hh\:mm") : "--:--")
                                </h4>
                                <small class="text-muted">Duration</small>
                            </div>
                        </div>                        <div class="col-md-3">
                            <div class="stat-box">
                                <h4 class="@(Model.IsLive ? "text-danger" : "text-secondary") mb-1">
                                    @(Model.IsLive ? "LIVE" : "OFFLINE")
                                </h4>
                                <small class="text-muted">Status</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Stream Timeline -->
            @if (Model.StartedAt.HasValue || Model.EndedAt.HasValue)
            {                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-clock"></i> Stream Timeline
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="timeline">
                            @if (Model.StartedAt.HasValue)
                            {
                                <div class="timeline-item">
                                    <div class="timeline-marker bg-success"></div>
                                    <div class="timeline-content">
                                        <h6>Stream Started</h6>
                                        <p class="text-muted mb-0">@Model.StartedAt.Value.ToString("dd/MM/yyyy HH:mm")</p>
                                    </div>
                                </div>
                            }
                            @if (Model.EndedAt.HasValue)
                            {
                                <div class="timeline-item">
                                    <div class="timeline-marker bg-danger"></div>
                                    <div class="timeline-content">
                                        <h6>Stream Ended</h6>
                                        <p class="text-muted mb-0">@Model.EndedAt.Value.ToString("dd/MM/yyyy HH:mm")</p>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Sidebar -->
        <div class="col-lg-4">
            <!-- Streamer Info -->            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-user"></i> Streamer Information
                    </h5>
                </div>
                <div class="card-body text-center">
                    <img src="@(string.IsNullOrEmpty(Model.Streamer.AvatarUrl) ? "/images/no-avatar.png" : Model.Streamer.AvatarUrl)" 
                         class="rounded-circle mb-3" 
                         alt="@Model.Streamer.Name"
                         style="width: 80px; height: 80px; object-fit: cover;">
                    
                    <h5 class="mb-1">
                        @Model.Streamer.Name
                        @if (Model.Streamer.IsVerified)
                        {
                            <i class="fas fa-check-circle text-primary" title="Verified"></i>
                        }
                    </h5>
                    
                    @if (!string.IsNullOrEmpty(Model.Streamer.Bio))
                    {
                        <p class="text-muted small">@Model.Streamer.Bio</p>
                    }
                    
                    <div class="row text-center">
                        <div class="col-6">
                            <h6 class="mb-0">@Model.Streamer.FollowerCount.ToString("N0")</h6>
                            <small class="text-muted">Followers</small>
                        </div>
                        <div class="col-6">                            <h6 class="mb-0 @(Model.Streamer.IsActive ? "text-success" : "text-danger")">
                                @(Model.Streamer.IsActive ? "Active" : "Inactive")
                            </h6>
                            <small class="text-muted">Status</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Category Info -->            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-tag"></i> Category
                    </h5>
                </div>
                <div class="card-body">
                    <h6>@Model.Category.Name</h6>
                    @if (!string.IsNullOrEmpty(Model.Category.Description))
                    {
                        <p class="text-muted small mb-0">@Model.Category.Description</p>
                    }
                </div>
            </div>

            <!-- Actions -->            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-cogs"></i> Actions
                    </h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">
                            <i class="fas fa-edit"></i> Edit Stream
                        </a>
                          @if (Model.IsLive)
                        {
                            <button class="btn btn-danger" onclick="endStream(@Model.Id)">
                                <i class="fas fa-stop"></i> End Stream
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-success" onclick="startStream(@Model.Id)">
                                <i class="fas fa-play"></i> Start Stream
                            </button>
                        }
                        
                        <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger" 
                           onclick="return confirm('Are you sure you want to delete this stream?')">
                            <i class="fas fa-trash"></i> Delete Stream
                        </a>
                        
                        <a asp-action="Index" class="btn btn-secondary">
                            <i class="fas fa-arrow-left"></i> Back to List
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.pulse-circle {
    animation: pulse 2s infinite;
}

@@keyframes pulse {
    0% { transform: scale(1); opacity: 1; }
    50% { transform: scale(1.1); opacity: 0.7; }
    100% { transform: scale(1); opacity: 1; }
}

.stat-box {
    padding: 15px;
    border-radius: 8px;
    background: #f8f9fa;
    margin-bottom: 15px;
}

.timeline {
    position: relative;
    padding-left: 30px;
}

.timeline-item {
    position: relative;
    padding-bottom: 20px;
}

.timeline-item:not(:last-child)::before {
    content: '';
    position: absolute;
    left: -25px;
    top: 10px;
    bottom: -10px;
    width: 2px;
    background: #dee2e6;
}

.timeline-marker {
    position: absolute;
    left: -30px;
    top: 5px;
    width: 10px;
    height: 10px;
    border-radius: 50%;
}

.stream-player {
    border-radius: 8px;
    overflow: hidden;
}
</style>

<script>
function startStream(streamId) {
    if (confirm('Do you want to start this stream?')) {
        // Ajax call to start stream
        fetch(`/Streams/StartStream/${streamId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            }
        })
        .then(response => {
            if (response.ok) {
                location.reload();
            } else {
                alert('An error occurred while starting the stream.');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while starting the stream.');
        });
    }
}

function endStream(streamId) {
    if (confirm('Do you want to end this stream?')) {
        // Ajax call to end stream
        fetch(`/Streams/EndStream/${streamId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            }
        })
        .then(response => {
            if (response.ok) {
                location.reload();
            } else {
                alert('An error occurred while ending the stream.');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while ending the stream.');
        });
    }
}
</script>
